tabElements=SyntaxPrompt,CommandsPrompt,TurtleQueriesPrompt,BooleanPrompt,MathPrompt,VariableCommandsPrompt,OtherPrompt

SyntaxPrompt=Syntax
SyntaxPromptList=constantPrompt,variablePrompt
constantPrompt= Constant - any real valued number
variablePrompt= Variable - any word preceded by a colon



CommandsPrompt=ActorCommands
CommandsPromptList=bkPrompt,ClrScrnPrompt,fdPrompt,hideTurtlePrompt,HomePrompt,ltPrompt,rtPrompt,PendownPrompt,PenupPrompt,SetHeadingPrompt,SetXYPrompt,ShowPrompt,TowardsPrompt
fdPrompt= Forward command - 'FORWARD *pixels*' OR 'fd *pixels* \n      Moves actor forward by *pixels* pixels, returns number of pixels moved
rtPrompt= Right command - 'Right *degrees*' OR 'rt *degrees*' \n      Turns actor clockwise by *degrees* degrees, returns degrees turned
bkPrompt= Back command  - 'BACK *pixels*' OR 'bk *pixels*' \n      Moves actors backward by *pixels* pixels, returns number of pixels moved
ltPrompt= Left Command - 'LEFT *degrees*' OR 'LT *degrees*'\n      Turns actor counterclockwise by given angle *degrees*, returns number of degrees turtle turned
ClrScrnPrompt= ClearScreen Command - 'CLEANSCREEN' OR 'CS' \n      Erases actor's trail and returns actor to the home position, returns distance turtle moved
hideTurtlePrompt= Hide Turtle Command - 'HIDETURTLE' OR 'HT' \n      Makes actor invisible, returns 0
HomePrompt= Home Command - 'HOME' \n      Moves the actor to the center of the screen (0,0), returns distance actors moved
PendownPrompt= Pen Down Command - 'PENDOWN' OR 'PD'\n      Puts pen down such that when the actor moves, it leaves a trail, returns 1
PenupPrompt= Pen Down Command - 'PENUP' OR 'PU'\n      Puts pen up such that when the actor moves, it does not leave a trail, returns 0
SetHeadingPrompt= Set Heading Command - 'SETHEADING *degrees*' OR 'SETH *degrees*' \n      Turns the actor to an absolute heading *degrees*, returns the number of degrees the actor turns
SetXYPrompt= Set X Y Command - 'SETXY *x* *y*' OR 'GOTO *x* *y*' \n      Moves turtle to given (*x*, *y*) position, where (0,0) is the center of the screen \n      Returns the distance the turtle moved
ShowPrompt= Show Command - 'SHOWTURTLE' OR 'ST' \n      Makes turtle visible, returns 1
TowardsPrompt= Towards Command - 'TOWARDS *x* *y*' \n      Turns the turtle to face the given (*x*, *y*) point, where (0,0) is the center of the screen \n      Returns number of degrees turtle turned

BooleanPrompt=Boolean
BooleanPromptList=AndPrompt,EqualPrompt,GreaterPrompt,GreaterEqualPrompt,LessPrompt,LessEqualPrompt,NotPrompt,NotEqualPrompt,OrPrompt
AndPrompt= And operation - 'AND *t1* *t2*' \n     Returns 1 if *t1* and *t2* are true, else 0
EqualPrompt= Equal operation - 'EQUAL? *expr1* *expr2*' OR 'EQUALP *expr1* *expr2*'\n      Returns 1 if *expr1* and *expr2* give same value, 0 else
GreaterPrompt= Greater operation 'GREATER? *expr1* *expr2*' OR 'GREATERP *expr1* *expr2*'\n      Returns 1 if *expr1* is strictly greater than expr2; 0 else
GreaterEqualPrompt= Greater operation 'GREATEREQUAL? *expr1* *expr2*' OR 'GREATEREQUALP *expr1* *expr2*'\n      Returns 1 if *expr1* is greater than or equal to expr2; 0 else
LessPrompt= Less operation 'LESS? *expr1* *expr2*' OR 'LESSP *expr1* *expr2*'\n      Returns 1 if *expr1* is strictly less than expr2; 0 else
LessEqualPrompt= Greater operation 'LESSEQUAL? *expr1* *expr2*' OR 'LESSEQUALP *expr1* *expr2*'\n      Returns 1 if *expr1* is less than or equal to expr2; 0 else
NotPrompt= Not operation - 'NOT *test*'\n      Reports logical opposite of given *test*, returns 1 if *test* is 0; 0 if test is non-zero
NotEqualPrompt= Not Equal operation 'NOTEQUAL? *expr1* *expr2*' OR 'NOTEQUALP *expr1* *expr2*'\n      Returns 1 if *expr1* and *expr2* are not equal; 0 else
OrPrompt= Or operation - 'OR *test1* *test2*' \n      Returns 1 if *test1* or *test2* are non-zero; 0 else

MathPrompt=Math
MathPromptList=arctanPrompt,cosPrompt,differencePrompt,logPrompt,MinusPrompt,PiPrompt,PowPrompt,ProductPrompt,QuotientPrompt,RandomPrompt,RandomRangePrompt,RemainderPrompt,sinPrompt,SqrtPrompt,SumPrompt,tanPrompt
arctanPrompt=Arctangent - 'ATAN *degrees*' \n     Returns Arctangent of *degrees*
cosPrompt= Cosine - 'COS *degrees*' \n      Returns Cosine of *degrees*
differencePrompt= Difference - '- t1 t2' \n      Returns t1 - t2
logPrompt= Log - 'LOG *expr*' \n      Returns natural log of *expr*
MinusPrompt= Minus - 'MINUS *expr* OR '- *expr*' \n      Returns the negative of the value of *expr*
PiPrompt= Pi - 'PI'\n      Returns the number PI
PowPrompt= Power Operation - 'POW *base* *exponent*' \n      Returns *base* raised to the power of the *exponent*
ProductPrompt= Product Operation - 'PRODUCT *expr1* *expr2*' OR '* *expr1* *expr2*' \n      Returns the product of *expr1* and *expr2*
QuotientPrompt= Product Operation - 'Quotient *expr1* *expr2*' OR '/ *expr1* *expr2*' \n      Returns the quotient of *expr1* divided by *expr2*
RandomPrompt= Random Operation - 'RANDOM *max*' OR 'RAND *max*'\n      Returns a non-negative number strictly less than *max*
RandomRangePrompt= Random Range Operation - 'RANDOMRANGE *min* *max*' OR 'RANDR *min* *max*' \n      Returns a number within the range *min* to *max*, inclusive
RemainderPrompt= Remainder Operation - 'REMAINDER *expr1* *expr2*' OR '% *expr1* *expr2*' \n      Returns remainder after dividing *expr1* by *expr2*
sinPrompt= Sine - 'SIN *degrees*' \n      Returns Sine of *degrees*
SqrtPrompt= Square Root - 'SQUAREROOT *expr*' OR 'SQRT *expr*' \n      Returns the square root of *expr*
SumPrompt= Sum - 'SUM *expr1* *expr2*' OR '+ *expr1* *expr2*' \n      Returns the sum of *expr1* and *expr2*
tanPrompt= Tangent - 'TAN *degrees*' \n      Returns Tangent of *degrees*

TurtleQueriesPrompt= ActorQueries
TurtleQueriesPromptList =HeadingPrompt,PendownQPrompt,ShowingPrompt,XCorPrompt,YCorPrompt
HeadingPrompt= Heading - 'HEADING' \n      Returns Actor's heading in degrees
PendownQPrompt = Pen Down - 'PENDOWN?' OR 'PENDOWNP'\n      Reports whether or not the actor's pen is down; returns 1 if pen is down, 0 else
ShowingPrompt= Showing - 'SHOWING?' OR 'SHOWINGP' \n      Reports whether or not the actor is visible; returns 1 if actor is showing, 0 else
XCorPrompt= X Coordinate - 'XCOR' \n      Reports actor's current x-coordinate, where (0,0) is the center of the screen; returns actor's x-coordinate
YCorPrompt= Y Coordinate - 'YCOR' \n      Reports actor's current y-coordinate, where (0,0) is the center of the screen; returns actor's y-coordinate

VariableCommandsPrompt=VariableCommands
VariableCommandsPromptList=MakePrompt,ToPrompt
MakePrompt= Make Command - 'MAKE *variable* *expr*' OR 'SET *variable* *expr*'\n      Assigns the value of *expr* to given variable name, creating the variable if necessary\n      Returns value of *expr*
ToPrompt= To Command- 'TO *commandName* [ variable(s) ] [ command(s) ]' \n      Assigns commmand(s) given in second list to *commandName* using parameters given in the first list \n      as variables. When *commandName* is used later in a program, any given values are assigned to variables that can be \n      accessed when the command list is run. \n      Returns 1 if command is successfully defined, 0 else


OtherPrompt=ControlStructureCommands
OtherPromptList=DoTimesPrompt,ForPrompt,IfPrompt,IfElsePrompt,RepeatPrompt
DoTimesPrompt= DoTimes Command - 'DOTIMES [ *variable* *limit* ] [ *command(s)* ]' \n      Runs command(s) for each value specified in the range, ie, from (1 - *limit*)\n      inclusive; *variable* is assigned to each succeeding value so that it can be\n      accessed by the command(s)\n      Returns result of last command in the list executed; 0 if no command is executed
ForPrompt= For Command - 'FOR [ *variable* *start* *end* *increment* ] [ command(s) ]' \n      Runs command(s) for each value specified in the range, ie, from (*start* - *end*),\n      going by *increment*; *variable* is assigned to each succeeding value so that\n      it can be accessed by the command(s).\n      Returns result of last command in the list executed; 1 if no command executed
IfPrompt= If Command - 'IF *expr* [ command(s) ] \n      If *expr* is not 0, runs the command(s) given in the list, returns result of last command\n      executed; 0 if no commands are executed
IfElsePrompt= If Else Command - 'IFELSE *expr* [ trueCommand(s) ] [ falseCommand(s) ]' \n      If *expr is not 0, runs the trueCommands given in the first list; otherwise runs the \n      falseCommands given in the second list\n      Returns result of last command in the list executed; 0 if no commands are executed
RepeatPrompt= Repeat Command - 'REPEAT 'expr* [ command(s) ]' \n      Runs command(s) given in the list *expr* number of times; the value of the current iteration, starting at \n      1 is automatically assigned to the variable, :repcount, so that it can be accessed by command(s) \n      Returns result of last command in the list executed; 0 if no commands are executed


