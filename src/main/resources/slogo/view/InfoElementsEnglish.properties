tabElements=SyntaxPrompt,CommandsPrompt,TurtleQueriesPrompt,BooleanPrompt,MathPrompt,VariableCommandsPrompt,OtherPrompt

SyntaxPrompt=Syntax
SyntaxPromptList=constantPrompt,variablePrompt
constantPrompt= Constant - any real valued number
variablePrompt= Variable - any word preceded by a colon



CommandsPrompt=TurtleCommands
CommandsPromptList=bkPrompt,ClrScrnPrompt,fdPrompt,hideTurtlePrompt,HomePrompt,ltPrompt,rtPrompt
fdPrompt= Forward command - 'FORWARD *pixels*' OR 'fd *pixels* \n      Moves actor forward by *pixels* pixels, returns number of pixels moved
rtPrompt= Right command - 'Right *degrees*' OR 'rt *degrees*' \n      Turns actor clockwise by *degrees* degrees, returns degrees turned
bkPrompt= Back command  - 'BACK *pixels*' OR 'bk *pixels*' \n      Moves actors backward by *pixels* pixels, returns number of pixels moved
ltPrompt= Left Command - 'LEFT *degrees*' OR 'LT *degrees*'\n      Turns turtle counterclockwise by given angle *degrees*, returns number of degrees turtle turned
ClrScrnPrompt= ClearScreen Command - 'CLEANSCREEN' OR 'CS' \n      Erases actor's trail and returns actor to the home position, returns distance turtle moved
hideTurtlePrompt= Hide Turtle Command - 'HIDETURTLE' OR 'HT' \n      Makes actor invisible, returns 0
HomePrompt= Home Command - 'HOME' \n      Moves the actor to the center of the screen (0,0), returns distance actors moved

BooleanPrompt=Boolean
BooleanPromptList=AndPrompt,EqualPrompt,GreaterPrompt,GreaterEqualPrompt,LessPrompt,LessEqualPrompt
AndPrompt= And operation - 'AND *t1* *t2*' \n     Returns 1 if *t1* and *t2* are true, else 0
EqualPrompt= Equal operation - 'EQUAL? *expr1* *expr2*' OR 'EQUALP *expr1* *expr2*'\n      Returns 1 if *expr1* and *expr2* give same value, 0 else
GreaterPrompt= Greater operation 'GREATER? *expr1* *expr2*' OR 'GREATERP *expr1* *expr2*'\n      Returns 1 if *expr1* is strictly greater than expr2; 0 else
GreaterEqualPrompt= Greater operation 'GREATEREQUAL? *expr1* *expr2*' OR 'GREATEREQUALP *expr1* *expr2*'\n      Returns 1 if *expr1* is greater than or equal to expr2; 0 else
LessPrompt= Less operation 'LESS? *expr1* *expr2*' OR 'LESSP *expr1* *expr2*'\n      Returns 1 if *expr1* is strictly less than expr2; 0 else
LessEqualPrompt= Greater operation 'LESSEQUAL? *expr1* *expr2*' OR 'LESSEQUALP *expr1* *expr2*'\n      Returns 1 if *expr1* is less than or equal to expr2; 0 else

MathPrompt=Math
MathPromptList=arctanPrompt,cosPrompt,differencePrompt,logPrompt,MinusPrompt
arctanPrompt=Arctangent - 'ATAN *degrees*' \n     Returns Arctangent of *degrees*
cosPrompt= Cosine - 'COS *degrees*' \n      Returns Cosine of *degrees*
differencePrompt= Difference - '- t1 t2' \n      Returns t1 - t2
logPrompt= Log - 'LOG *expr*' \n      Returns natural log of *expr*
MinusPrompt= Minus - 'MINUS *expr* OR '- *expr*' \n      Calculates the negation of the given value, returns the negative of the value of *expr*

TurtleQueriesPrompt= TurtleQueries
TurtleQueriesPromptList =HeadingPrompt
HeadingPrompt= Heading - 'HEADING' \n      Returns Actor's heading in degrees

VariableCommandsPrompt=VariableCommands
VariableCommandsPromptList=MakePrompt
MakePrompt= Make Command - 'MAKE *variable* *expr*' OR 'SET *variable* *expr*'\n      Assigns the value of *expr* to given variable name, creating the variable if necessary\n      Returns value of *expr*


OtherPrompt=Other
OtherPromptList=DoTimesPrompt,ForPrompt,IfPrompt,IfElsePrompt
DoTimesPrompt= DoTimes Command - 'DOTIMES [ *variable* *limit* ] [ *command(s)* ]' \n      Runs command(s) for each value specified in the range, ie, from (1 - *limit*)\n      inclusive; *variable* is assigned to each succeeding value so that it can be\n      accessed by the command(s)\n      Returns result of last command in the list executed; 0 if no command is executed
ForPrompt= For Command - 'FOR [ *variable* *start* *end* *increment* ] [ command(s) ]' \n      Runs command(s) for each value specified in the range, ie, from (*start* - *end*),\n      going by *increment*; *variable* is assigned to each succeeding value so that\n      it can be accessed by the command(s).\n      Returns result of last command in the list executed; 1 if no command executed
IfPrompt= If Command - 'IF *expr* [ command(s) ] \n      If *expr* is not 0, runs the command(s) given in the list, returns result of last command\n      executed; 0 if no commands are executed
IfElsePrompt= If Else Command - 'IFELSE *expr* [ trueCommand(s) ] [ falseCommand(s) ]' \n      If *expr is not 0, runs the trueCommands given in the first list; otherwise runs the \n      falseCommands given in the second list\n      Returns result of last command in the list executed; 0 if no commands are executed



